# B·∫£n quy·ªÅn (c) 2025 devgagan : https://github.com/devgaganin.  
# ƒê∆∞·ª£c c·∫•p ph√©p theo Gi·∫•y ph√©p C√¥ng c·ªông GNU v3.0.  
# Xem t·ªáp LICENSE trong th∆∞ m·ª•c g·ªëc c·ªßa kho ƒë·ªÉ bi·∫øt vƒÉn b·∫£n gi·∫•y ph√©p ƒë·∫ßy ƒë·ªß.

from pyrogram import Client, filters
from pyrogram.types import Message
from pyrogram.errors import BadRequest, SessionPasswordNeeded, PhoneCodeInvalid, PhoneCodeExpired, MessageNotModified
import logging
import os

from config import API_HASH, API_ID
from shared_client import app as bot
from utils.func import save_user_session, get_user_data, remove_user_session, save_user_bot, remove_user_bot
from utils.encrypt import ecs, dcs
from plugins.batch import UB, UC
from utils.custom_filters import login_in_progress, set_user_step, get_user_step

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
model = "MY TEAM SKY"

STEP_PHONE = 1
STEP_CODE = 2
STEP_PASSWORD = 3
login_cache = {}

@bot.on_message(filters.command('login'))
async def login_command(client, message):
    user_id = message.from_user.id
    set_user_step(user_id, STEP_PHONE)
    login_cache.pop(user_id, None)
    await message.delete()
    status_msg = await message.reply(
        """Vui l√≤ng g·ª≠i s·ªë ƒëi·ªán tho·∫°i c·ªßa b·∫°n k√®m m√£ qu·ªëc gia.
V√≠ d·ª•: `+84123456789`"""
        )
    login_cache[user_id] = {'status_msg': status_msg}
    
@bot.on_message(filters.command("setbot"))
async def set_bot_token(C, m):
    user_id = m.from_user.id
    args = m.text.split(" ", 1)
    if user_id in UB:
        try:
            await UB[user_id].stop()
            if UB.get(user_id, None):
                del UB[user_id]
            try:
                if os.path.exists(f"user_{user_id}.session"):
                    os.remove(f"user_{user_id}.session")
            except Exception:
                pass
            print(f"ƒê√£ d·ª´ng v√† x√≥a bot c≈© c·ªßa ng∆∞·ªùi d√πng {user_id}")
        except Exception as e:
            print(f"L·ªói khi d·ª´ng bot c≈© c·ªßa ng∆∞·ªùi d√πng {user_id}: {e}")
            del UB[user_id]
    if len(args) < 2:
        await m.reply_text("‚ö†Ô∏è Vui l√≤ng cung c·∫•p bot token. C√∫ ph√°p: `/setbot token`", quote=True)
        return
    bot_token = args[1].strip()
    await save_user_bot(user_id, bot_token)
    await m.reply_text("‚úÖ ƒê√£ l∆∞u bot token th√†nh c√¥ng.", quote=True)
    
@bot.on_message(filters.command("rembot"))
async def rem_bot_token(C, m):
    user_id = m.from_user.id
    if user_id in UB:
        try:
            await UB[user_id].stop()
            if UB.get(user_id, None):
                del UB[user_id]
            print(f"ƒê√£ d·ª´ng v√† x√≥a bot c≈© c·ªßa ng∆∞·ªùi d√πng {user_id}")
            try:
                if os.path.exists(f"user_{user_id}.session"):
                    os.remove(f"user_{user_id}.session")
            except Exception:
                pass
        except Exception as e:
            print(f"L·ªói khi d·ª´ng bot c≈© c·ªßa ng∆∞·ªùi d√πng {user_id}: {e}")
            if UB.get(user_id, None):
                del UB[user_id]
            try:
                if os.path.exists(f"user_{user_id}.session"):
                    os.remove(f"user_{user_id}.session")
            except Exception:
                pass
    await remove_user_bot(user_id)
    await m.reply_text("‚úÖ ƒê√£ x√≥a bot token th√†nh c√¥ng.", quote=True)

@bot.on_message(login_in_progress & filters.text & filters.private & ~filters.command([
    'start', 'batch', 'cancel', 'login', 'logout', 'stop', 'set', 'pay',
    'redeem', 'gencode', 'generate', 'keyinfo', 'encrypt', 'decrypt', 'keys', 'setbot', 'rembot']))
async def handle_login_steps(client, message):
    user_id = message.from_user.id
    text = message.text.strip()
    step = get_user_step(user_id)
    try:
        await message.delete()
    except Exception as e:
        logger.warning(f'Kh√¥ng th·ªÉ x√≥a tin nh·∫Øn: {e}')
    status_msg = login_cache[user_id].get('status_msg')
    if not status_msg:
        status_msg = await message.reply('ƒêang x·ª≠ l√Ω...')
        login_cache[user_id]['status_msg'] = status_msg
    try:
        if step == STEP_PHONE:
            if not text.startswith('+'):
                await edit_message_safely(status_msg,
                    '‚ùå Vui l√≤ng cung c·∫•p s·ªë ƒëi·ªán tho·∫°i h·ª£p l·ªá b·∫Øt ƒë·∫ßu b·∫±ng d·∫•u +')
                return
            await edit_message_safely(status_msg,
                'üîÑ ƒêang x·ª≠ l√Ω s·ªë ƒëi·ªán tho·∫°i...')
            temp_client = Client(f'temp_{user_id}', api_id=API_ID, api_hash=API_HASH, device_model=model, in_memory=True)
            try:
                await temp_client.connect()
                sent_code = await temp_client.send_code(text)
                login_cache[user_id]['phone'] = text
                login_cache[user_id]['phone_code_hash'] = sent_code.phone_code_hash
                login_cache[user_id]['temp_client'] = temp_client
                set_user_step(user_id, STEP_CODE)
                await edit_message_safely(status_msg,
                    """‚úÖ M√£ x√°c th·ª±c ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn t√†i kho·∫£n Telegram c·ªßa b·∫°n.
                    
Vui l√≤ng nh·∫≠p m√£ b·∫°n nh·∫≠n ƒë∆∞·ª£c, v√≠ d·ª•: 1 2 3 4 5 (c√°c s·ªë c√°ch nhau b·ªüi d·∫•u c√°ch):"""
                    )
            except BadRequest as e:
                await edit_message_safely(status_msg,
                    f"""‚ùå L·ªói: {str(e)}
Vui l√≤ng th·ª≠ l·∫°i v·ªõi l·ªánh /login.""")
                await temp_client.disconnect()
                set_user_step(user_id, None)
        elif step == STEP_CODE:
            code = text.replace(' ', '')
            phone = login_cache[user_id]['phone']
            phone_code_hash = login_cache[user_id]['phone_code_hash']
            temp_client = login_cache[user_id]['temp_client']
            try:
                await edit_message_safely(status_msg, 'üîÑ ƒêang x√°c th·ª±c m√£...')
                await temp_client.sign_in(phone, phone_code_hash, code)
                session_string = await temp_client.export_session_string()
                encrypted_session = ecs(session_string)
                await save_user_session(user_id, encrypted_session)
                await temp_client.disconnect()
                temp_status_msg = login_cache[user_id]['status_msg']
                login_cache.pop(user_id, None)
                login_cache[user_id] = {'status_msg': temp_status_msg}
                await edit_message_safely(status_msg,
                    """‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!!""")
                set_user_step(user_id, None)
            except SessionPasswordNeeded:
                set_user_step(user_id, STEP_PASSWORD)
                await edit_message_safely(status_msg,
                    """üîí B·∫°n ƒëang b·∫≠t x√°c minh hai b∆∞·ªõc.
Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u c·ªßa b·∫°n:""")
            except (PhoneCodeInvalid, PhoneCodeExpired) as e:
                await edit_message_safely(status_msg,
                    f'‚ùå {str(e)}. Vui l√≤ng th·ª≠ l·∫°i v·ªõi /login.')
                await temp_client.disconnect()
                login_cache.pop(user_id, None)
                set_user_step(user_id, None)
        elif step == STEP_PASSWORD:
            temp_client = login_cache[user_id]['temp_client']
            try:
                await edit_message_safely(status_msg, 'üîÑ ƒêang x√°c minh m·∫≠t kh·∫©u...')
                await temp_client.check_password(text)
                session_string = await temp_client.export_session_string()
                encrypted_session = ecs(session_string)
                await save_user_session(user_id, encrypted_session)
                await temp_client.disconnect()
                temp_status_msg = login_cache[user_id]['status_msg']
                login_cache.pop(user_id, None)
                login_cache[user_id] = {'status_msg': temp_status_msg}
                await edit_message_safely(status_msg,
                    """‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!!""")
                set_user_step(user_id, None)
            except BadRequest as e:
                await edit_message_safely(status_msg,
                    f"""‚ùå Sai m·∫≠t kh·∫©u: {str(e)}
Vui l√≤ng th·ª≠ l·∫°i:""")
    except Exception as e:
        logger.error(f'L·ªói trong qu√° tr√¨nh ƒëƒÉng nh·∫≠p: {str(e)}')
        await edit_message_safely(status_msg,
            f"""‚ùå ƒê√£ x·∫£y ra l·ªói: {str(e)}
Vui l√≤ng th·ª≠ l·∫°i v·ªõi /login.""")
        if user_id in login_cache and 'temp_client' in login_cache[user_id]:
            await login_cache[user_id]['temp_client'].disconnect()
        login_cache.pop(user_id, None)
        set_user_step(user_id, None)

async def edit_message_safely(message, text):
    """H√†m h·ªó tr·ª£ ƒë·ªÉ ch·ªânh s·ª≠a tin nh·∫Øn v√† x·ª≠ l√Ω l·ªói"""
    try:
        await message.edit(text)
    except MessageNotModified:
        pass
    except Exception as e:
        logger.error(f'L·ªói khi ch·ªânh s·ª≠a tin nh·∫Øn: {e}')

@bot.on_message(filters.command('cancel'))
async def cancel_command(client, message):
    user_id = message.from_user.id
    await message.delete()
    if get_user_step(user_id):
        status_msg = login_cache.get(user_id, {}).get('status_msg')
        if user_id in login_cache and 'temp_client' in login_cache[user_id]:
            await login_cache[user_id]['temp_client'].disconnect()
        login_cache.pop(user_id, None)
        set_user_step(user_id, None)
        if status_msg:
            await edit_message_safely(status_msg,
                '‚úÖ ƒê√£ h·ªßy qu√° tr√¨nh ƒëƒÉng nh·∫≠p. S·ª≠ d·ª•ng /login ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫°i.')
        else:
            temp_msg = await message.reply(
                '‚úÖ ƒê√£ h·ªßy qu√° tr√¨nh ƒëƒÉng nh·∫≠p. S·ª≠ d·ª•ng /login ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫°i.')
            await temp_msg.delete(5)
    else:
        temp_msg = await message.reply('Kh√¥ng c√≥ qu√° tr√¨nh ƒëƒÉng nh·∫≠p n√†o ƒëang di·ªÖn ra.')
        await temp_msg.delete(5)

@bot.on_message(filters.command('logout'))
async def logout_command(client, message):
    user_id = message.from_user.id
    await message.delete()
    status_msg = await message.reply('üîÑ ƒêang x·ª≠ l√Ω y√™u c·∫ßu ƒëƒÉng xu·∫•t...')
    try:
        session_data = await get_user_data(user_id)
        if not session_data or 'session_string' not in session_data:
            await edit_message_safely(status_msg,
                '‚ùå Kh√¥ng t√¨m th·∫•y phi√™n ho·∫°t ƒë·ªông n√†o cho t√†i kho·∫£n c·ªßa b·∫°n.')
            return
        encss = session_data['session_string']
        session_string = dcs(encss)
        temp_client = Client(f'temp_logout_{user_id}', api_id=API_ID,
            api_hash=API_HASH, session_string=session_string)
        try:
            await temp_client.connect()
            await temp_client.log_out()
            await edit_message_safely(status_msg,
                '‚úÖ ƒê√£ ƒëƒÉng xu·∫•t t√†i kho·∫£n Telegram th√†nh c√¥ng. ƒêang x√≥a d·ªØ li·ªáu...')
        except Exception as e:
            logger.error(f'L·ªói khi ƒëƒÉng xu·∫•t: {str(e)}')
            await edit_message_safely(status_msg,
                f"""‚ö†Ô∏è L·ªói khi ƒëƒÉng xu·∫•t Telegram: {str(e)}
V·∫´n ti·∫øn h√†nh x√≥a d·ªØ li·ªáu...""")
        finally:
            await temp_client.disconnect()
        await remove_user_session(user_id)
        await edit_message_safely(status_msg,
            '‚úÖ ƒêƒÉng xu·∫•t th√†nh c√¥ng!!')
        try:
            if os.path.exists(f"{user_id}_client.session"):
                os.remove(f"{user_id}_client.session")
        except Exception:
            pass
        if UC.get(user_id, None):
            del UC[user_id]
    except Exception as e:
        logger.error(f'L·ªói trong l·ªánh logout: {str(e)}')
        try:
            await remove_user_session(user_id)
        except Exception:
            pass
        if UC.get(user_id, None):
            del UC[user_id]
        await edit_message_safely(status_msg,
            f'‚ùå C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh ƒëƒÉng xu·∫•t: {str(e)}')
        try:
            if os.path.exists(f"{user_id}_client.session"):
                os.remove(f"{user_id}_client.session")
        except Exception:
            pass
